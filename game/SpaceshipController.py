import sys
from time import sleep

from PodSixNet.Connection import connection, ConnectionListener
from SpaceshipViewer import SpaceshipViewer
from game.Constants import *

class Client(ConnectionListener, SpaceshipViewer):
    def __init__(self, host, port):
        print "Spaceship controller init"
        self.Connect((host, port))
        self.players = {}
        SpaceshipViewer.__init__(self)
    
    def Loop(self):
        self.Pump()
        connection.Pump()
        self.GameLoop()
    
        if "connecting" in self.statusLabel:
            self.statusLabel = "connecting" + ("." * ((self.frame / 30) % 4))
        
        #######################    
        ### Event callbacks ###
        #######################
        #def PenDraw(self, e):
        #    connection.Send({"action": "draw", "point": e.pos})
    def fireRequest(self, data):
        data.update({"action": "request"})
        connection.Send(data)

    def LandedSafely(self, info):
        print "event key down captured"
        self.fireRequest({"request_action":LANDED_SUCCESSFULLY, POINT_SCORED: info})
    
    def CrashLanded(self, info=None):
        print "event key c captured"
        self.fireRequest({"request_action":CRASH_LANDED, CRASH_LANDED: info})
    
    def BuyFuel(self, info=None):
        print "event key b captured"
        self.fireRequest({"request_action":BUY_FUEL, BUY_FUEL: info})    
    
    def RequestPlot(self, info):
        print "event key r captured", info
        self.fireRequest({"request_action":REQUEST_PLOT, PLOT_TYPE: info})
    
    def ReturnToEarth(self, info=None):
        print "event key e captured", info
        self.fireRequest({"request_action":RETURN_TO_EARTH, SPACESHIP_FUEL_KEY: info})
    
    def QuitGame(self, info=None):
        print "event key q captured"
        self.fireRequest({"request_action":QUIT_GAME, QUIT_GAME: info})
        
        ###############################
        ### Network event callbacks ###
        ###############################
    
    def Network_acknowledge(self, data):
        print "Received Acknowledge from server" , data
        self.players = data['players']
        self.notify_ui("Acknowledged")

    def Network_StartGame(self, data):
        print "Game Started!"
        self.playersLabel = str(len(data['players'])) + " players"
        self.c.game_ready()
    
    def Network_response(self, data):
        print "data in network", data
    #Entry point of events generated by server to the client
        if "response_action" in data:
            print "inside network method of LunarLander"
            action = data['response_action']
            print "data", data
            if action == PRINT_LEADERBOARD:
                print action , ':\n' , data[action]
            elif action == BASE_STATION_FUEL_UPDATED:
                print action , ':' , data[action]        
            elif action == FUEL_REQUEST_DENIED:
                print action , '!', data[action]
            elif action == REQUEST_PLOT_APPROVED:
                print action , '!' , data[action]
            elif action == REQUEST_PLOT_DENIED:
                print action , '!' , data[action]
            elif action == NOTIFICATION:
                print action , ':' , data[action]
            elif action == UPDATE_GAME_SCORE:
                print action , ' event received'
                gameScore = data[action]
                print GOLD , ' = ', gameScore[GOLD]
                print IRON , ' = ', gameScore[IRON]
                print COPPER , ' = ', gameScore[COPPER]
            elif action == UPDATE_GRID_STATUS:
                print action , ' event received'
                miningGrid = data[action]
                print GOLD , ' = ',miningGrid[GOLD]
                print IRON , ' = ',miningGrid[IRON]
                print COPPER , ' = ', miningGrid[COPPER]
            elif action == UPDATE_SPACESHIP_STATE:
                print action , data[action]
                # update the spaceship information
        else:
            print "data received: ", data    
    
    def Network(self, data):
        pass

    def Network_connected(self, data):
        self.statusLabel = "connected"
    
    def Network_error(self, data):
        print data
        import traceback
        traceback.print_exc()
        self.statusLabel = data['error'][1]
        connection.Close()
    
    def Network_disconnected(self, data):
        self.statusLabel += " - disconnected"

if len(sys.argv) != 2:
    print "Usage:", sys.argv[0], "host:port"
    print "e.g.", sys.argv[0], "localhost:31425"
else:
    host, port = sys.argv[1].split(":")
    c = Client(host, int(port))
    while 1:
        c.Loop()
        sleep(0.001)
    
